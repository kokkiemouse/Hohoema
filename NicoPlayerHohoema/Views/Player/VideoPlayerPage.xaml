<Page x:Class="NicoPlayerHohoema.Views.VideoPlayerPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:local="using:NicoPlayerHohoema.Views"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      mc:Ignorable="d"
      xmlns:i="using:Microsoft.Xaml.Interactivity"
      xmlns:core="using:Microsoft.Xaml.Interactions.Core"
      xmlns:toolkit="using:WinRTXamlToolkit.Controls"
      xmlns:toolkitext="using:WinRTXamlToolkit.Controls.Extensions"
      xmlns:mybehavior="using:NicoPlayerHohoema.Views.Behaviors"
      xmlns:viewmodel="using:NicoPlayerHohoema.ViewModels"
      xmlns:sidepaneVM="using:NicoPlayerHohoema.ViewModels.PlayerSidePaneContent"
      xmlns:logicalTrigger="using:AdaptiveTriggerLibrary.Triggers.LogicalTriggers"
      xmlns:connectivityTrigger="using:AdaptiveTriggerLibrary.Triggers.ConnectivityTriggers"
      xmlns:intractionTrigger="using:AdaptiveTriggerLibrary.Triggers.UserInteractionTriggers"
      xmlns:uiTrigger="using:AdaptiveTriggerLibrary.Triggers.UserInterfaceTriggers"
      xmlns:myTrigger="using:NicoPlayerHohoema.Views.StateTrigger"
      xmlns:hardTrigger="using:AdaptiveTriggerLibrary.Triggers.HardwareInterfaceTriggers"
      xmlns:media="using:Microsoft.Xaml.Interactions.Media"
      xmlns:uwptoolkit="using:Microsoft.Toolkit.Uwp.UI.Animations.Behaviors"
      xmlns:uwpui="using:Microsoft.Toolkit.Uwp.UI.Extensions"
      xmlns:uwpControls="using:Microsoft.Toolkit.Uwp.UI.Controls"
      xmlns:iconPack="using:MahApps.Metro.IconPacks"
      xmlns:model="using:NicoPlayerHohoema.Models"
      xmlns:mvvm="using:Prism.Mvvm"
      xmlns:controls="using:NicoPlayerHohoema.Views.Controls"
      xmlns:system1="using:System"
      xmlns:templateselector="using:NicoPlayerHohoema.Views.TemplateSelector"
      DataContext="{x:Null}"
      x:Name="RootLayout"
      NavigationCacheMode="Required"
      d:DesignHeight="300"
      d:DesignWidth="400">
  <UserControl.Resources>
    <MenuFlyout x:Key="VideoOptionsFlyout">
      <MenuFlyoutItem Text="再生/一時停止" Command="{Binding VideoPlayer.TogglePlayPauseCommand}" />
      <ToggleMenuFlyoutItem IsChecked="{Binding ObservableMediaPlayer.IsMuted.Value, Mode=TwoWay}" Text="ミュート" />
      <ToggleMenuFlyoutItem IsChecked="{Binding IsCommentDisplayEnable.Value, Mode=TwoWay, Converter={StaticResource BoolNegation}}" Text="コメント非表示" />
      <MenuFlyoutSubItem Text="画質" Visibility="{Binding VideoPlayer.AvailableQualities, Converter={StaticResource CollectionVisibilityConverter}}" x:Name="VideoQualityMenuFlyoutSubImte">
        <i:Interaction.Behaviors>
          <mybehavior:MenuFlyoutSubItemItemsSetter ItemsSource="{Binding VideoPlayer.AvailableQualities}" CustomObjectToTag="{Binding}">
            <mybehavior:MenuFlyoutSubItemItemsSetter.ItemTemplate>
              <DataTemplate>
                <MenuFlyoutItem IsEnabled="{Binding IsAvailable}" Text="{Binding Quality, Converter={StaticResource ToLocalText}}" Command="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag.VideoPlayer.ChangePlayQualityCommand}" CommandParameter="{Binding}"></MenuFlyoutItem>
              </DataTemplate>
            </mybehavior:MenuFlyoutSubItemItemsSetter.ItemTemplate>
          </mybehavior:MenuFlyoutSubItemItemsSetter>
        </i:Interaction.Behaviors>
      </MenuFlyoutSubItem>
      <MenuFlyoutSubItem Text="再生速度">
        <MenuFlyoutItem Text="等倍速に戻す" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>1.0</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutSeparator />
        <MenuFlyoutItem Text="200%" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>2.0</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="175%" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>1.75</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="150%" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>1.5</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="125%" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>1.25</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutSeparator />
        <MenuFlyoutItem Text="75%" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>0.75</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="50%" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>0.5</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="25%" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>0.25</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
      </MenuFlyoutSubItem>
      <MenuFlyoutSeparator />
      <MenuFlyoutItem x:Name="FullscreenButton_Menu" Command="{Binding WindowService.ToggleFullScreenCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="全画面" Icon="FullScreen"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="CompactOverlayButton_Menu" Command="{Binding WindowService.ToggleCompactOverlayCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="小さく最前面"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="SmallWindowButton_Menu" Command="{Binding WindowService.PlayerSmallWindowDisplayCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="小窓"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="DisplayWithSecondaryViewButton_Menu" Command="{Binding WindowService.PlayerDisplayWithSecondaryViewCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="別ウィンドウ"></MenuFlyoutItem>
      <ToggleMenuFlyoutItem x:Name="ForceRotateToggleButton_Menu" IsChecked="{Binding PlayerSettings.IsForceLandscape, Mode=TwoWay}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="横持ち固定" Icon="Orientation"></ToggleMenuFlyoutItem>
    </MenuFlyout>
    <templateselector:PlayerSidePaneContentTemplateSelecter x:Key="PlayerSidePaneContentTemplateSelecter">
      <templateselector:PlayerSidePaneContentTemplateSelecter.Empty>
        <DataTemplate>
          <!-- empty -->
        </DataTemplate>
      </templateselector:PlayerSidePaneContentTemplateSelecter.Empty>
      <templateselector:PlayerSidePaneContentTemplateSelecter.Playlist>
        <DataTemplate>
          <local:PlaylistSidePaneContent />
        </DataTemplate>
      </templateselector:PlayerSidePaneContentTemplateSelecter.Playlist>
      <templateselector:PlayerSidePaneContentTemplateSelecter.Comments>
        <DataTemplate>
          <local:LiveCommentsSidePaneContent />
        </DataTemplate>
      </templateselector:PlayerSidePaneContentTemplateSelecter.Comments>
      <templateselector:PlayerSidePaneContentTemplateSelecter.Settings>
        <DataTemplate>
          <local:VideoSettingsSidePaneContent />
        </DataTemplate>
      </templateselector:PlayerSidePaneContentTemplateSelecter.Settings>
      <templateselector:PlayerSidePaneContentTemplateSelecter.RelatedVideos>
        <DataTemplate>
          <local:RelatedVideosSidePaneContent />
        </DataTemplate>
      </templateselector:PlayerSidePaneContentTemplateSelecter.RelatedVideos>
    </templateselector:PlayerSidePaneContentTemplateSelecter>
  </UserControl.Resources>
  <Grid x:Name="LayoutRoot" Background="{StaticResource AppBarBorderThemeBrush}">
    <toolkit:LayoutTransformControl x:Name="LayoutTransform">
      <toolkit:LayoutTransformControl.Transform>
        <RotateTransform x:Name="LayoutRotateTranform" Angle="0" />
      </toolkit:LayoutTransformControl.Transform>
      <SplitView PanePlacement="Right" x:Name="PlayerSplitView" IsTabStop="False">
        <i:Interaction.Behaviors>
          <!-- サイドペインのコンテンツVMが指定されたらサイドペインを開く -->
          <!-- 条件に{x:Null}ではなく PlayerSidePaneContentType.None を指定しているのは
                         nullの場合、閉じた後のバインディングエラーによって
                         意図しない値が書き戻される可能性があるためです
                    -->
          <core:DataTriggerBehavior Binding="{x:Bind SidePaneType, Mode=OneWay}" ComparisonCondition="NotEqual" Value="{x:Null}">
            <core:ChangePropertyAction PropertyName="IsPaneOpen" Value="True" />
          </core:DataTriggerBehavior>
          <!-- サイドペインが閉じられたら コンテンツVMをリセット -->
          <core:EventTriggerBehavior EventName="PaneClosed">
            <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="SidePaneType" Value="{x:Null}" />
          </core:EventTriggerBehavior>
        </i:Interaction.Behaviors>
        <SplitView.Pane>
          <Grid x:Name="PlayerSidePaneLayout">
            <ContentControl Content="{x:Bind SidePaneType, Mode=OneWay}" ContentTemplateSelector="{StaticResource PlayerSidePaneContentTemplateSelecter}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" />
          </Grid>
        </SplitView.Pane>
        <SplitView.Content>
          <!-- Media Control -->
          <Grid x:Name="MediaControl" ContextFlyout="{StaticResource VideoOptionsFlyout}" ManipulationMode="TranslateX">
            <i:Interaction.Behaviors>
              <!-- 再生停止時にUIを表示 -->
              <core:DataTriggerBehavior Binding="{Binding ObservableMediaPlayer.NowPlaying.Value}" Value="False" ComparisonCondition="Equal">
                <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="True" />
              </core:DataTriggerBehavior>
              <core:DataTriggerBehavior Binding="{Binding ObservableMediaPlayer.NowPlaying.Value}" Value="True" ComparisonCondition="Equal">
                <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="False" />
              </core:DataTriggerBehavior>
              <!-- 左右スワイプでシーク -->
              <mybehavior:Swipe x:Name="SeekSwipe" SwipeCommand="{Binding SeekCommand}" SwipeAmountConverter="{StaticResource SwipeSeekValueToTimeSpan}" SwipeAmountScale="0.15" SwipeEdgeOfPlay="48" />
              <!-- マウスの非表示 -->
              <mybehavior:AutoHideCursor x:Name="AutoHideCursor" IsAutoHideEnabled="False" AutoHideDelay="0:0:4" />
              <core:EventTriggerBehavior EventName="Loaded">
                <mybehavior:SetFocus TargetObject="{Binding ElementName=RootLayout}" />
              </core:EventTriggerBehavior>
              <!-- スペースキー入力で再生停止の切り替え-->
              <mybehavior:KeyboardTrigger Key="Space" x:Name="PlayPauseToggleKeyboardTrigger">
                <core:InvokeCommandAction Command="{Binding VideoPlayer.TogglePlayPauseCommand}" />
              </mybehavior:KeyboardTrigger>
              <mybehavior:KeyboardTrigger Key="Enter" x:Name="CommentSubmitKeyboardTrigger">
                <mybehavior:KeyboardTrigger.Actions>
                  <core:InvokeCommandAction Command="{Binding CommentPlayer.CommentSubmitCommand}" />
                </mybehavior:KeyboardTrigger.Actions>
              </mybehavior:KeyboardTrigger>
              <mybehavior:KeyboardTrigger Key="Escape" x:Name="CommentWriteExitKeyboardTrigger" IsEnabled="False">
                <mybehavior:KeyboardTrigger.Actions>
                  <core:ChangePropertyAction TargetObject="{Binding ElementName=CommentTextBox}" PropertyName="IsEnabled" Value="False" />
                  <core:ChangePropertyAction TargetObject="{Binding ElementName=CommentTextBox}" PropertyName="IsEnabled" Value="True" />
                  <core:ChangePropertyAction TargetObject="{Binding ElementName=CO_CommentTextBox}" PropertyName="IsEnabled" Value="False" />
                  <core:ChangePropertyAction TargetObject="{Binding ElementName=CO_CommentTextBox}" PropertyName="IsEnabled" Value="True" />
                </mybehavior:KeyboardTrigger.Actions>
              </mybehavior:KeyboardTrigger>
              <mybehavior:KeyboardTrigger Key="Right" x:Name="VideoForwardKeyboardTrigger">
                <mybehavior:KeyboardTrigger.Actions>
                  <core:InvokeCommandAction Command="{Binding SeekCommand}" CommandParameter="{x:Bind ForwardSeekTime}" />
                </mybehavior:KeyboardTrigger.Actions>
              </mybehavior:KeyboardTrigger>
              <mybehavior:KeyboardTrigger Key="Left" x:Name="VideoPreviewKeyboardTrigger">
                <mybehavior:KeyboardTrigger.Actions>
                  <core:InvokeCommandAction Command="{Binding SeekCommand}" CommandParameter="{x:Bind PreviewSeekTime}" />
                </mybehavior:KeyboardTrigger.Actions>
              </mybehavior:KeyboardTrigger>
              <mybehavior:KeyboardTrigger x:Name="CommentWriteBeginKeyboardTrigger">
                <mybehavior:KeyboardTrigger.Actions>
                  <mybehavior:SetFocus TargetObject="{Binding ElementName=CommentTextBox}" Delay="00:00:00" />
                </mybehavior:KeyboardTrigger.Actions>
              </mybehavior:KeyboardTrigger>
              <mybehavior:KeyboardTrigger x:Name="CO_CommentWriteBeginKeyboardTrigger" IsEnabled="False">
                <mybehavior:KeyboardTrigger.Actions>
                  <mybehavior:SetFocus TargetObject="{Binding ElementName=CO_CommentTextBox}" Delay="00:00:00" />
                </mybehavior:KeyboardTrigger.Actions>
              </mybehavior:KeyboardTrigger>
              <mybehavior:MouseWheelTrigger>
                <mybehavior:MouseWheelTrigger.UpActions>
                  <core:InvokeCommandAction Command="{Binding VolumeUpCommand}" CommandParameter="{Binding PlayerSettings.SoundVolumeChangeFrequency}" />
                </mybehavior:MouseWheelTrigger.UpActions>
                <mybehavior:MouseWheelTrigger.DownActions>
                  <core:InvokeCommandAction Command="{Binding VolumeDownCommand}" CommandParameter="{Binding PlayerSettings.SoundVolumeChangeFrequency}" />
                </mybehavior:MouseWheelTrigger.DownActions>
              </mybehavior:MouseWheelTrigger>
              <mybehavior:UINavigationTrigger Kind="Cancel" x:Name="ControllerToggleDisplayUITrigger" IsEnabled="True">
                <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="{x:Bind IsDisplayControlUI, Mode=OneWay, Converter={StaticResource BoolNegation}}" />
              </mybehavior:UINavigationTrigger>
              <mybehavior:UINavigationTrigger x:Name="ConrollerHidePlayerTrigger" Kind="Cancel" Hold="True" IsEnabled="True">
                <core:InvokeCommandAction Command="{Binding PrimaryViewPlayerManager.CloseCommand}" />
              </mybehavior:UINavigationTrigger>
              <mybehavior:UINavigationTrigger x:Name="ControllerSeekPreviewTrigger" Kind="PageLeft" IsEnabled="True">
                <core:InvokeCommandAction Command="{Binding SeekCommand}" CommandParameter="{x:Bind PreviewSeekTime}" />
              </mybehavior:UINavigationTrigger>
              <mybehavior:UINavigationTrigger x:Name="ControllerSeekForwardTrigger" Kind="PageRight" IsEnabled="True">
                <core:InvokeCommandAction Command="{Binding SeekCommand}" CommandParameter="{x:Bind ForwardSeekTime}" />
              </mybehavior:UINavigationTrigger>
              <mybehavior:UINavigationTrigger x:Name="ControllerTogglePlayPauseTrigger" Kind="Context1" IsEnabled="True">
                <core:InvokeCommandAction Command="{Binding VideoPlayer.TogglePlayPauseCommand}" />
              </mybehavior:UINavigationTrigger>
            </i:Interaction.Behaviors>
            <MediaPlayerElement x:Name="MediaPlayerElement" AutoPlay="True">
              <i:Interaction.Behaviors>
                <mybehavior:MediaPlayerSetter MediaPlayer="{Binding MediaPlayer}" />
                <mybehavior:MediaPlayerElementContentHeightGetter ContentHeight="{x:Bind CommentRederer.Height, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
              </i:Interaction.Behaviors>
            </MediaPlayerElement>
            <local:CommentRendererCompositionUI x:Name="CommentRederer" MediaPlayer="{Binding MediaPlayer}" Comments="{Binding CommentPlayer.Comments}" Visibility="{Binding PlayerSettings.IsCommentDisplay_Video, Converter={StaticResource BooleanToVisibility}}" CommentSizeScale="{Binding PlayerSettings.DefaultCommentFontScale}" CommentDefaultColor="{Binding PlayerSettings.CommentColor}" DefaultDisplayDuration="{Binding PlayerSettings.CommentDisplayDuration}" Opacity="{Binding PlayerSettings.CommentOpacity, Mode=OneWay}" UpdateInterval="0:0:0.032" PlayerSettings="{Binding PlayerSettings}" />
            <ProgressRing Visibility="{Binding ObservableMediaPlayer.NowBuffering.Value, Mode=OneWay, Converter={StaticResource BooleanToVisibility}}" IsActive="{Binding ObservableMediaPlayer.NowBuffering.Value, Mode=OneWay}" Width="48" Height="48" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0 88 24 0" />
            <!-- ウィンドウ非アクティブ時に画面全体をマウス移動の反応対象にするためのコリジョン-->
            <Border x:Name="WindowDeactiveMouseMoveDetectWall" Background="Transparent"></Border>
            <!-- UI非表示時の再生位置バー -->
            <Slider Value="{Binding ElementName=SeekBarSlider, Path=Value, Mode=TwoWay}" Maximum="{Binding VideoInfo.Length, Converter={StaticResource TimeSpanToDoubleConverter}}" Style="{StaticResource VideoProgressBarStyle}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" IsEnabled="False" Opacity="0.6" x:Name="ReadOnlySeekBarSlider">
              <Slider.RenderTransform>
                <TranslateTransform Y="8" />
              </Slider.RenderTransform>
            </Slider>
            <Border IsHitTestVisible="True" Background="Transparent">
              <i:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="Tapped">
                  <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="{x:Bind IsDisplayControlUI, Mode=OneWay, Converter={StaticResource BoolNegation}}" />
                </core:EventTriggerBehavior>
              </i:Interaction.Behaviors>
            </Border>
            <StackPanel>
              <!-- 音量表示 -->
              <controls:TransientContainer Content="{Binding ObservableMediaPlayer.SoundVolume.Value}" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="16">
                <controls:TransientContainer.Background>
                  <SolidColorBrush Color="{ThemeResource SystemAltMediumColor}" />
                </controls:TransientContainer.Background>
                <controls:TransientContainer.ContentTemplate>
                  <DataTemplate>
                    <Grid Margin="16 2 16 4">
                      <Border>
                        <TextBlock FontSize="20" VerticalAlignment="Center">
                                                <Run Text="音量" />:
                                                <Run Text="{Binding Converter={StaticResource ToUserFriendlySoubleVolume}}" FontSize="22" />%</TextBlock>
                      </Border>
                    </Grid>
                  </DataTemplate>
                </controls:TransientContainer.ContentTemplate>
              </controls:TransientContainer>
              <!-- シーク位置表示 -->
              <controls:TransientContainer Content="{x:Bind SeekSwipe.SwipeAmount, Mode=OneWay}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="16" DisplayDuration="0:0:3">
                <controls:TransientContainer.Background>
                  <SolidColorBrush Color="{ThemeResource SystemAltMediumColor}" />
                </controls:TransientContainer.Background>
                <controls:TransientContainer.ContentTemplate>
                  <DataTemplate>
                    <Grid Margin="16 2 16 4">
                      <Border>
                        <TextBlock FontSize="25" VerticalAlignment="Center" TextLineBounds="TrimToBaseline">
                                                シーク: <Run Text="{Binding Converter={StaticResource TimeToMovieLengthConverter}}" />秒</TextBlock>
                      </Border>
                    </Grid>
                  </DataTemplate>
                </controls:TransientContainer.ContentTemplate>
              </controls:TransientContainer>
            </StackPanel>
            <Grid x:Name="UIControlLayout">
              <i:Interaction.Behaviors>
                <mybehavior:VisiblityFadeChanger x:Name="PlayerControlAutoHide" Delay="{Binding PlayerSettings.AutoHidePlayerControlUIPreventTime}" IsVisible="{x:Bind IsDisplayControlUI, Mode=TwoWay}" />
                <core:DataTriggerBehavior Binding="{x:Bind IsDisplayControlUI, Mode=OneWay}" Value="True">
                  <mybehavior:SetFocus TargetObject="{Binding ElementName=PlayPauseButton}" Delay="00:00:00" IsEnabled="{Binding IsTVModeEnabled}" />
                </core:DataTriggerBehavior>
              </i:Interaction.Behaviors>
              <toolkit:DockPanel x:Name="DefaultUIControl">
                <!-- プレイリスト 操作 -->
                <StackPanel toolkit:DockPanel.Dock="Top">
                  <Border Background="{StaticResource HohoemaPlayerBackgroundBrush}">
                    <toolkit:DockPanel x:Name="UIControlHeaderLayout" Opacity="0.8">
                      <Border x:Name="TitleBarMarginLayout" Height="32" toolkit:DockPanel.Dock="Top" Visibility="Collapsed"></Border>
                      <StackPanel Orientation="Horizontal" toolkit:DockPanel.Dock="Left">
                        <Button x:Name="CloseButton" Command="{Binding PrimaryViewPlayerManager.CloseCommand}" Background="Transparent" UseSystemFocusVisuals="True">
                          <iconPack:PackIconMaterial Kind="Close" />
                        </Button>
                        <Button x:Name="DisplayWithMainViewButton" Command="{Binding TogglePlayerDisplayViewCommand}" Background="Transparent" Visibility="Collapsed">
                          <StackPanel Orientation="Vertical">
                            <iconPack:PackIconMaterial Kind="CheckboxBlankOutline" Margin="0 0 0 8" Height="24" Width="24" HorizontalAlignment="Center" />
                            <TextBlock Text="メインウィンドウ" Style="{StaticResource CaptionTextBlockStyle}" VerticalAlignment="Center" />
                          </StackPanel>
                        </Button>
                      </StackPanel>
                      <CommandBar toolkit:DockPanel.Dock="Right">
                        <CommandBar.PrimaryCommands>
                          <AppBarButton x:Name="ShowVideoInfoButon" Label="動画情報" Command="{Binding OpenVideoInfoCommand}" Visibility="Collapsed"></AppBarButton>
                          <AppBarButton Command="{x:Bind SelectSidePaneCommand}" CommandParameter="RelatedVideos" Background="Transparent" Label="関連情報" />
                          <AppBarButton x:Name="ShareButton" Label="共有" Icon="Link" Visibility="Collapsed" Command="{Binding ExternalAccessService.OpenShareUICommand}" CommandParameter="{Binding VideoInfo}"></AppBarButton>
                          <AppBarButton Label="コピー" Visibility="{Binding IsXbox, Converter={StaticResource BooleanToVisibilityInverted}}">
                            <AppBarButton.Flyout>
                              <MenuFlyout>
                                <MenuFlyoutItem Text="動画IDをコピー" Command="{Binding ExternalAccessService.CopyToClipboardCommand}" CommandParameter="{Binding VideoId}" />
                                <MenuFlyoutItem Text="リンクをコピー" Command="{Binding ExternalAccessService.CopyToClipboardCommand}" CommandParameter="{Binding}" />
                                <MenuFlyoutItem Text="共有用文章をコピー" Command="{Binding ExternalAccessService.CopyToClipboardWithShareTextCommand}" CommandParameter="{Binding}" />
                              </MenuFlyout>
                            </AppBarButton.Flyout>
                          </AppBarButton>
                          <AppBarButton x:Name="AddContentButton" Label="追加" Icon="Add">
                            <AppBarButton.Flyout>
                              <MenuFlyout>
                                <MenuFlyoutSubItem Text="マイリストに追加">
                                  <i:Interaction.Behaviors>
                                    <mybehavior:MenuFlyoutSubItemItemsSetter ItemsSource="{Binding UserMylistManager.Mylists}" CustomObjectToTag="{Binding VideoId}">
                                      <mybehavior:MenuFlyoutSubItemItemsSetter.ItemTemplate>
                                        <DataTemplate>
                                          <MenuFlyoutItem Text="{Binding Label}" Command="{Binding AddItemCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag}"></MenuFlyoutItem>
                                        </DataTemplate>
                                      </mybehavior:MenuFlyoutSubItemItemsSetter.ItemTemplate>
                                    </mybehavior:MenuFlyoutSubItemItemsSetter>
                                  </i:Interaction.Behaviors>
                                  <MenuFlyoutItem Text="新規作成…" Command="{Binding CreateMylistCommand}" CommandParameter="{Binding VideoId}" />
                                </MenuFlyoutSubItem>
                                <MenuFlyoutSubItem Text="ローカルマイリストに追加">
                                  <i:Interaction.Behaviors>
                                    <mybehavior:MenuFlyoutSubItemItemsSetter ItemsSource="{Binding LocalMylistManager.Mylists}" CustomObjectToTag="{Binding VideoId}">
                                      <mybehavior:MenuFlyoutSubItemItemsSetter.ItemTemplate>
                                        <DataTemplate>
                                          <MenuFlyoutItem Text="{Binding Label}" Command="{Binding AddItemCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag}"></MenuFlyoutItem>
                                        </DataTemplate>
                                      </mybehavior:MenuFlyoutSubItemItemsSetter.ItemTemplate>
                                    </mybehavior:MenuFlyoutSubItemItemsSetter>
                                  </i:Interaction.Behaviors>
                                  <MenuFlyoutItem Text="新規作成…" Command="{Binding CreateLocalMylistCommand}" CommandParameter="{Binding VideoId}" />
                                </MenuFlyoutSubItem>
                                <MenuFlyoutSubItem x:Name="AddSubscriptionButton" Text="投稿者動画を購読">
                                  <i:Interaction.Behaviors>
                                    <mybehavior:MenuFlyoutSubItemItemsSetter ItemsSource="{Binding SubscriptionManager.Subscriptions}" CustomObjectToTag="{Binding SubscriptionSource}">
                                      <mybehavior:MenuFlyoutSubItemItemsSetter.ItemTemplate>
                                        <DataTemplate>
                                          <MenuFlyoutItem Text="{Binding Label}" Command="{Binding AddSource}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag}" />
                                        </DataTemplate>
                                      </mybehavior:MenuFlyoutSubItemItemsSetter.ItemTemplate>
                                    </mybehavior:MenuFlyoutSubItemItemsSetter>
                                  </i:Interaction.Behaviors>
                                  <MenuFlyoutItem Text="購読グループを作成..." Command="{Binding CreateSubscriptionGroupCommand}" CommandParameter="{Binding SubscriptionSource}" />
                                </MenuFlyoutSubItem>
                              </MenuFlyout>
                            </AppBarButton.Flyout>
                          </AppBarButton>
                        </CommandBar.PrimaryCommands>
                        <CommandBar.SecondaryCommands>
                          <AppBarButton x:Name="FullscreenButton" Command="{Binding WindowService.ToggleFullScreenCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Label="全画面" Icon="FullScreen"></AppBarButton>
                          <AppBarButton x:Name="CompactOverlayButton" Command="{Binding WindowService.ToggleCompactOverlayCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Label="小さく最前面"></AppBarButton>
                          <AppBarButton x:Name="SmallWindowButton" Command="{Binding PrimaryViewPlayerManager.WindowInWindowCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Label="小窓"></AppBarButton>
                          <AppBarButton x:Name="DisplayWithSecondaryViewButton" Command="{Binding TogglePlayerDisplayViewCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Label="別ウィンドウ"></AppBarButton>
                          <AppBarToggleButton x:Name="ForceRotateToggleButton" IsChecked="{Binding PlayerSettings.IsForceLandscape, Mode=TwoWay}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Label="横持ち固定" Icon="Orientation"></AppBarToggleButton>
                        </CommandBar.SecondaryCommands>
                      </CommandBar>
                      <Border />
                    </toolkit:DockPanel>
                  </Border>
                </StackPanel>
                <!-- 動画コンテンツ 操作 -->
                <StackPanel toolkit:DockPanel.Dock="Bottom">
                  <StackPanel x:Name="UIControlContentLayout" Background="{StaticResource HohoemaPlayerBackgroundBrush}">
                    <StackPanel Margin="8 0">
                      <TextBlock x:Name="TitleLayout" Text="{Binding VideoInfo.Title}" FontSize="24" HorizontalAlignment="Center" TextWrapping="Wrap" />
                      <i:Interaction.Behaviors>
                        <core:EventTriggerBehavior EventName="Tapped">
                          <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="False" />
                        </core:EventTriggerBehavior>
                      </i:Interaction.Behaviors>
                    </StackPanel>
                    <!-- シークバー -->
                    <StackPanel>
                      <Grid Margin="0 0 0 12">
                        <!--
                                        <local:DownloadProgressBar 
                                                ProgressFragmentItems="{Binding ProgressFragments}"
                                                Margin="0 20 0 0"
                                                />
                                        -->
                        <TextBlock Text="投稿者によってシークが禁止されています" Visibility="Collapsed" VerticalAlignment="Bottom" HorizontalAlignment="Center" Opacity="0.6" x:Name="SeekDisabledFromNicoScriptText" />
                        <Slider x:Name="SeekBarSlider" Minimum="0.0" Maximum="{Binding VideoInfo.Length, Converter={StaticResource TimeSpanToDoubleConverter}}" Style="{StaticResource VideoProgressBarStyle}" Padding="0 16 0 8" StepFrequency="0.1" LargeChange="30" SmallChange="5" IsThumbToolTipEnabled="True" ThumbToolTipValueConverter="{StaticResource TimeToMovieLengthConverter}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalAlignment="Center" Opacity="0.75"></Slider>
                      </Grid>
                      <Grid Margin="0 0 0 8">
                        <StackPanel HorizontalAlignment="Left" VerticalAlignment="Bottom" Orientation="Horizontal" Margin="8 0 16 0">
                          <TextBlock Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Visibility="{Binding VideoPlayer.NowPlayingWithDmcVideo,Converter={StaticResource BooleanToVisibilityInverted}}">
                            <Run Text="{Binding VideoPlayer.CurrentQuality.Quality, Converter={StaticResource ToLocalText}}" /></TextBlock>
                          <HyperlinkButton Visibility="{Binding VideoPlayer.NowPlayingWithDmcVideo,Converter={StaticResource BooleanToVisibility}}" Padding="0" Opacity="0.7">
                            <TextBlock Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}">
                              <Run Text="{Binding VideoPlayer.CurrentQuality.Quality, Converter={StaticResource ToLocalText}}" /></TextBlock>
                            <i:Interaction.Behaviors>
                              <core:EventTriggerBehavior EventName="Click">
                                <mybehavior:OpenFlyout />
                              </core:EventTriggerBehavior>
                            </i:Interaction.Behaviors>
                            <FlyoutBase.AttachedFlyout>
                              <Flyout>
                                <ListView ItemsSource="{Binding VideoPlayer.AvailableQualities, Mode=OneWay}" SelectedItem="{Binding VideoPlayer.CurrentQuality, Mode=OneWay}" SelectionMode="Single" IsItemClickEnabled="True" uwpui:ListViewBase.Command="{Binding VideoPlayer.ChangePlayQualityCommand}">
                                  <ListView.ItemTemplate>
                                    <DataTemplate>
                                      <StackPanel Orientation="Horizontal" Spacing="8">
                                        <TextBlock Text="{Binding Quality, Converter={StaticResource ToLocalText}}" />
                                        <TextBlock toolkitext:ListViewItemExtensions.IsEnabled="{Binding IsAvailable}">
                                           <Run Text="{Binding Bitrate, Converter={StaticResource ToKMGTPEZY}}" />bps</TextBlock>
                                      </StackPanel>
                                    </DataTemplate>
                                  </ListView.ItemTemplate>
                                </ListView>
                              </Flyout>
                            </FlyoutBase.AttachedFlyout>
                          </HyperlinkButton>
                          <Border Width="8" />
                          <TextBlock Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Visibility="{Binding VideoPlayer.IsPlayWithCache.Value, Converter={StaticResource BooleanToVisibility}}">
                                                        <Run Text="(キャッシュ済み)" /></TextBlock>
                          <TextBlock Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Visibility="{Binding VideoPlayer.IsPlayWithCache.Value, Converter={StaticResource BooleanToVisibilityInverted}}">
                                                        <Run Text="(オンライン再生)" /></TextBlock>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                          <TextBlock VerticalAlignment="Bottom" IsHitTestVisible="False" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Margin="16 0 8 0">
                                        
                                                    <Run Text="{x:Bind VideoPosition, Mode=OneWay, Converter={StaticResource TimeToMovieLengthConverter}}" />
                                                    <Run Text="/" />
                                                    <Run Text="{Binding VideoInfo.Length, Converter={StaticResource TimeToMovieLengthConverter}}" /></TextBlock>
                          <HyperlinkButton Margin="0 0 16 0" VerticalAlignment="Bottom" Opacity="0.7" MinWidth="36" HorizontalAlignment="Right" Padding="0">
                            <i:Interaction.Behaviors>
                              <core:EventTriggerBehavior EventName="Click">
                                <mybehavior:OpenFlyout />
                              </core:EventTriggerBehavior>
                            </i:Interaction.Behaviors>
                            <FlyoutBase.AttachedFlyout>
                              <Flyout>
                                <ListView ItemsSource="{x:Bind PlaybackRateList}" SelectedItem="{Binding ObservableMediaPlayer.PlaybackRate.Value, Mode=OneWay}" SelectionMode="Single" IsItemClickEnabled="True" uwpui:ListViewBase.Command="{Binding SetPlaybackRateCommand}">
                                  <ListView.ItemTemplate>
                                    <DataTemplate>
                                      <TextBlock>
                                                                                x<Run Text="{Binding}" /></TextBlock>
                                    </DataTemplate>
                                  </ListView.ItemTemplate>
                                </ListView>
                              </Flyout>
                            </FlyoutBase.AttachedFlyout>
                            <TextBlock VerticalAlignment="Center">
                                                            x<Run Text="{Binding ObservableMediaPlayer.PlaybackRate.Value}" /></TextBlock>
                          </HyperlinkButton>
                        </StackPanel>
                      </Grid>
                    </StackPanel>
                    <!-- 再生コントロール -->
                    <Grid Padding="8 0 8 0" x:Name="PlaybackControlContainer">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <StackPanel Orientation="Horizontal">
                        <!-- 音量 -->
                        <Button Background="Transparent">
                          <SymbolIcon x:Name="VolumeButton" Symbol="Mute" />
                          <Button.Flyout>
                            <Flyout>
                              <toolkit:DockPanel toolkit:DockPanel.Dock="Right" Margin="0 0 16 0" Height="66">
                                <StackPanel toolkit:DockPanel.Dock="Left">
                                  <AppBarButton Icon="Volume" Label="ミュート" VerticalAlignment="Stretch" x:Name="MuteToggleButton" Command="{Binding ToggleMuteCommand}"></AppBarButton>
                                </StackPanel>
                                <StackPanel Margin="8 0" Orientation="Vertical">
                                  <Slider x:Name="VolumeSlider" Orientation="Horizontal" VerticalAlignment="Top" Margin="8 4" IsThumbToolTipEnabled="True" ThumbToolTipValueConverter="{StaticResource ToUserFriendlySoubleVolume}" Maximum="1.0" Minimum="0.0" StepFrequency="0.01" SmallChange="0.01" LargeChange="0.1" Height="32" Width="160" ValueChanged="VolumeSlider_ValueChanged"></Slider>
                                  <TextBlock Text="音量" VerticalAlignment="Center" Margin="8 0 0 0" HorizontalAlignment="Center" FontSize="12" />
                                </StackPanel>
                              </toolkit:DockPanel>
                            </Flyout>
                          </Button.Flyout>
                        </Button>
                        <Button Background="Transparent">
                          <Grid>
                            <iconPack:PackIconMaterial Kind="Comment" x:Name="CommentIcon" Width="20" Height="20" />
                            <Canvas>
                              <Line X1="{Binding ElementName=CommentIcon, Path=ActualWidth}" Y1="0" X2="0" Y2="{Binding ElementName=CommentIcon, Path=ActualHeight}" Stroke="Red" StrokeThickness="4" Visibility="{Binding PlayerSettings.IsCommentDisplay_Video, Converter={StaticResource BooleanToVisibilityInverted}}" Opacity="0.7" />
                            </Canvas>
                          </Grid>
                          <i:Interaction.Behaviors>
                            <core:EventTriggerBehavior EventName="Tapped">
                              <core:ChangePropertyAction TargetObject="{Binding PlayerSettings}" PropertyName="IsCommentDisplay_Video" Value="{Binding PlayerSettings.IsCommentDisplay_Video, Converter={StaticResource BoolNegation}}" />
                            </core:EventTriggerBehavior>
                          </i:Interaction.Behaviors>
                        </Button>
                      </StackPanel>
                      <!-- 再生 -->
                      <StackPanel Orientation="Horizontal" x:Name="MiddleUIControlLayout" Grid.Column="1">
                        <Button Background="Transparent" Command="{Binding SeekCommand}" CommandParameter="{x:Bind PreviewSeekTime}" x:Name="PreviewVideoPositionButon" Margin="0 0 24 0">
                          <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xED3C;" FontSize="24" />
                        </Button>
                        <Button Command="{Binding VideoPlayer.TogglePlayPauseCommand}" Background="Transparent" Margin="0 0 0 0" x:Name="PlayPauseButton">
                          <iconPack:PackIconMaterial Kind="Play" x:Name="PlayPauseButtonIcon" RenderTransformOrigin="0.5, 0.5">
                            <iconPack:PackIconMaterial.RenderTransform>
                              <CompositeTransform ScaleX="1.35" ScaleY="1.35" />
                            </iconPack:PackIconMaterial.RenderTransform>
                          </iconPack:PackIconMaterial>
                        </Button>
                        <Button x:Name="ForwardVideoPositionButon" Background="Transparent" Command="{Binding SeekCommand}" CommandParameter="{x:Bind ForwardSeekTime}" Margin="24 0 0 0">
                          <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xED3D;" FontSize="24" />
                        </Button>
                      </StackPanel>
                      <!-- Fullscreen / More -->
                      <toolkit:WrapPanel Orientation="Horizontal" Grid.Column="2" HorizontalAlignment="Right" VerticalAlignment="Center">
                        <Button Background="Transparent" Command="{x:Bind SelectSidePaneCommand}" CommandParameter="Playlist">
                          <iconPack:PackIconMaterial Kind="PlaylistPlay" Width="24" Height="24"></iconPack:PackIconMaterial>
                        </Button>
                        <Button Command="{x:Bind SelectSidePaneCommand}" CommandParameter="Setting" Background="Transparent">
                          <SymbolIcon Symbol="Setting" />
                        </Button>
                      </toolkit:WrapPanel>
                    </Grid>
                    <!-- コメントを書く -->
                    <Grid x:Name="CommentLayout" Padding="0 8 0 0" Visibility="Collapsed">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="1*" />
                      </Grid.ColumnDefinitions>
                      <TextBox x:Name="CommentTextBox" Text="{Binding CommentPlayer.WritingComment.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource BGTransparentTextBoxStyle}" FontSize="18" VerticalAlignment="Center" MaxLength="75" IsTabStop="True" toolkitext:TextBoxFocusExtensions.AutoSelectOnFocus="True" PlaceholderText="コメント" HorizontalAlignment="Stretch" Margin="8 0 8 0" HorizontalContentAlignment="Stretch" Height="40" Grid.RowSpan="2" Grid.Column="1" Grid.ColumnSpan="4" IsEnabled="{Binding IsCommentDisabledFromNicoScript.Value, Converter={StaticResource BoolNegation}}"></TextBox>
                      <Button Content="{Binding CommandString.Value}" Margin="8 0 8 0" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" DataContext="{Binding}" x:Name="CommentCommandEditButton" Height="40" UseSystemFocusVisuals="True" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="1">
                        <Button.Flyout>
                          <Flyout>
                            <local:CommentCommandEditer DataContext="{Binding CommandEditerVM}" />
                          </Flyout>
                        </Button.Flyout>
                      </Button>
                      <Button Margin="8 0 8 0" Height="40" Command="{Binding CommentPlayer.CommentSubmitCommand}" x:Name="CommentSubmitButton" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" UseSystemFocusVisuals="True" Grid.RowSpan="2" Grid.Column="5" Grid.ColumnSpan="1">
                        <Grid>
                          <TextBlock Text="投稿" />
                          <ProgressRing x:Name="CommentSubmittingProgressRing" IsActive="False" Height="24" Width="24" VerticalAlignment="Center" />
                        </Grid>
                      </Button>
                    </Grid>
                    <Border Height="8" />
                  </StackPanel>
                </StackPanel>
                <Grid x:Name="UIControlCenterLayout" BorderThickness="0">
                  <Border IsHitTestVisible="True" Background="Transparent" BorderThickness="0">
                    <i:Interaction.Behaviors>
                      <core:EventTriggerBehavior EventName="Tapped">
                        <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="False" />
                      </core:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                  </Border>
                  <Border x:Name="PlayEndedRecommendContainer" Background="{ThemeResource SystemAltMediumColor}" Visibility="Collapsed">
                    <controls:DelayedAutoTriggerButton x:Name="PlayEndedRecommend" Command="{Binding VideoEndedRecommendation.PlayNextVideoCommand}" HorizontalAlignment="Center" VerticalAlignment="Center">
                      <controls:DelayedAutoTriggerButton.CenterContent>
                        <StackPanel Spacing="4">
                          <TextBlock Text="次の動画" Opacity="0.7" />
                          <TextBlock Text="{Binding VideoEndedRecommendation.NextVideoTitle}" Style="{StaticResource SubtitleTextBlockStyle}" />
                        </StackPanel>
                      </controls:DelayedAutoTriggerButton.CenterContent>
                      <i:Interaction.Behaviors>
                        <core:DataTriggerBehavior Binding="{Binding VideoEndedRecommendation.HasNextVideo}" Value="True" ComparisonCondition="Equal">
                          <core:CallMethodAction MethodName="Start" />
                        </core:DataTriggerBehavior>
                      </i:Interaction.Behaviors>
                    </controls:DelayedAutoTriggerButton>
                  </Border>
                  <Border Height="32" VerticalAlignment="Top" Visibility="{Binding VideoEndedRecommendation.IsEnded.Value, Converter={StaticResource BooleanToVisibilityInverted}}">
                    <Border.Background>
                      <LinearGradientBrush StartPoint="1, 1" EndPoint="1, 0">
                        <GradientStop Color="{Binding Source={StaticResource SystemAltMediumColor}, Converter={StaticResource ToTransparentColor}}" Offset="0.0" />
                        <GradientStop Color="{ThemeResource SystemAltMediumColor}" Offset="1.0" />
                      </LinearGradientBrush>
                    </Border.Background>
                  </Border>
                  <Border Height="48" BorderThickness="0" VerticalAlignment="Bottom" Visibility="{Binding VideoEndedRecommendation.IsEnded.Value, Converter={StaticResource BooleanToVisibilityInverted}}">
                    <Border.Background>
                      <LinearGradientBrush x:Name="ControlPanelBackgroundBrush" StartPoint="1, 0" EndPoint="1, 1">
                        <GradientStop Color="{Binding Source={StaticResource SystemAltMediumColor}, Converter={StaticResource ToTransparentColor}}" Offset="0.0" x:Name="GradientStop1" />
                        <GradientStop Color="{ThemeResource SystemAltMediumColor}" Offset="1.0" x:Name="GradientStop2" />
                      </LinearGradientBrush>
                    </Border.Background>
                    <Border.RenderTransform>
                      <TranslateTransform Y="0" />
                    </Border.RenderTransform>
                    <i:Interaction.Behaviors>
                      <core:EventTriggerBehavior EventName="Tapped">
                        <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="False" />
                      </core:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                  </Border>
                  <Border VerticalAlignment="Center" HorizontalAlignment="Left">
                    <Button MinWidth="24" Height="120" Command="{Binding VideoPlayer.PlayPreviousCommand}" BorderBrush="{StaticResource HohoemaPlayerBackgroundBrush}" BorderThickness="0 1 1 1">
                      <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE016;" FontSize="20" Foreground="{ThemeResource HohoemaPlayerBackgroundBrush}"></TextBlock>
                    </Button>
                  </Border>
                  <Border VerticalAlignment="Center" HorizontalAlignment="Right">
                    <Button MinWidth="24" Height="120" Command="{Binding VideoPlayer.PlayNextCommand}" BorderBrush="{StaticResource HohoemaPlayerBackgroundBrush}" BorderThickness="1 1 0 1">
                      <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE017;" FontSize="20" Foreground="{ThemeResource HohoemaPlayerBackgroundBrush}"></TextBlock>
                    </Button>
                  </Border>
                </Grid>
              </toolkit:DockPanel>
              <!-- Compact Overlay UIControl -->
              <Grid x:Name="CompactOverlayUIControl" Visibility="Collapsed" Background="{StaticResource HohoemaPlayerBackgroundBrush}">
                <Grid>
                  <Border IsHitTestVisible="True" Background="Transparent">
                    <i:Interaction.Behaviors>
                      <core:EventTriggerBehavior EventName="Tapped">
                        <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="{x:Bind IsDisplayControlUI, Mode=OneWay, Converter={StaticResource BoolNegation}}" />
                      </core:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                  </Border>
                </Grid>
                <toolkit:DockPanel>
                  <Border toolkit:DockPanel.Dock="Top" Height="32" Background="{StaticResource HohoemaPlayerBackgroundBrush}">
                    <TextBlock Text="{Binding VideoInfo.Title}" Style="{StaticResource CaptionTextBlockStyle}" VerticalAlignment="Center" Margin="14 0 8 0" />
                  </Border>
                  <toolkit:DockPanel toolkit:DockPanel.Dock="Top">
                    <Button x:Name="CO_CloseButton" Command="{Binding PrimaryViewPlayerManager.CloseCommand}" Background="Transparent" toolkit:DockPanel.Dock="Left" UseSystemFocusVisuals="True">
                      <iconPack:PackIconMaterial Kind="Close" />
                    </Button>
                    <Border />
                  </toolkit:DockPanel>
                  <Slider Value="{Binding ElementName=SeekBarSlider, Path=Value, Mode=TwoWay}" Maximum="{Binding VideoInfo.Length, Converter={StaticResource TimeSpanToDoubleConverter}}" Style="{StaticResource VideoProgressBarStyle}" HorizontalAlignment="Stretch" IsEnabled="False" Opacity="0.6" toolkit:DockPanel.Dock="Bottom">
                    <Slider.RenderTransform>
                      <TranslateTransform Y="8" />
                    </Slider.RenderTransform>
                  </Slider>
                  <StackPanel VerticalAlignment="Bottom">
                    <!-- 再生コントロール -->
                    <Grid Padding="8 0 8 0">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <StackPanel Orientation="Horizontal">
                        <Button x:Name="CO_ToggleCommentDisplayButton" Background="Transparent">
                          <Grid>
                            <iconPack:PackIconMaterial Kind="Comment" Width="18" Height="18" />
                            <Canvas>
                              <Line X1="{Binding ElementName=CommentIcon, Path=ActualWidth}" Y1="0" X2="0" Y2="{Binding ElementName=CommentIcon, Path=ActualHeight}" Stroke="Red" StrokeThickness="3" Visibility="{Binding PlayerSettings.IsCommentDisplay_Video, Converter={StaticResource BooleanToVisibilityInverted}}" Opacity="0.7" />
                            </Canvas>
                          </Grid>
                          <i:Interaction.Behaviors>
                            <core:EventTriggerBehavior EventName="Tapped">
                              <core:ChangePropertyAction TargetObject="{Binding PlayerSettings}" PropertyName="IsCommentDisplay_Video" Value="{Binding PlayerSettings.IsCommentDisplay_Video, Converter={StaticResource BoolNegation}}" />
                            </core:EventTriggerBehavior>
                          </i:Interaction.Behaviors>
                        </Button>
                      </StackPanel>
                      <!-- 再生 -->
                      <StackPanel Orientation="Horizontal" Grid.Column="1">
                        <Button Background="Transparent" Command="{Binding SeekCommand}" CommandParameter="{x:Bind PreviewSeekTime}" Margin="0 0 8 0" x:Name="CO_PreviewVideoPositionButton">
                          <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xED3C;" FontSize="20" />
                        </Button>
                        <Button Command="{Binding VideoPlayer.TogglePlayPauseCommand}" Background="Transparent" Margin="0 0 0 0" x:Name="CO_PlayPauseButton">
                          <iconPack:PackIconMaterial Kind="Play" x:Name="CO_PlayPauseButtonIcon" RenderTransformOrigin="0.5, 0.5">
                            <iconPack:PackIconMaterial.RenderTransform>
                              <CompositeTransform ScaleX="1.35" ScaleY="1.35" />
                            </iconPack:PackIconMaterial.RenderTransform>
                          </iconPack:PackIconMaterial>
                        </Button>
                        <Button Background="Transparent" Command="{Binding SeekCommand}" CommandParameter="{x:Bind ForwardSeekTime}" x:Name="CO_ForwardVideoPositionButton" Margin="8 0 0 0">
                          <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xED3D;" FontSize="20" />
                        </Button>
                      </StackPanel>
                      <!-- Fullscreen / More -->
                      <toolkit:WrapPanel Orientation="Horizontal" Grid.Column="2" HorizontalAlignment="Right" VerticalAlignment="Center">
                        <Button Command="{Binding WindowService.ToggleCompactOverlayCommand}" Background="Transparent" x:Name="CO_CompactOverlayButton">
                          <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE944;" FontSize="24" />
                        </Button>
                      </toolkit:WrapPanel>
                    </Grid>
                    <Grid x:Name="CO_CommentBoxLayout" Visibility="Collapsed">
                      <TextBox x:Name="CO_CommentTextBox" Text="{Binding CommentPlayer.WritingComment.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource BGTransparentTextBoxStyle}" FontSize="18" VerticalAlignment="Center" MaxLength="75" MaxWidth="320" IsTabStop="True" toolkitext:TextBoxFocusExtensions.AutoSelectOnFocus="True" PlaceholderText="コメント" HorizontalAlignment="Stretch" Margin="8 0 8 0" HorizontalContentAlignment="Stretch" Height="18"></TextBox>
                      <ProgressRing x:Name="CO_CommentSubmittingProgressRing" IsActive="False" Height="24" Width="24" HorizontalAlignment="Right" Margin="0 0 16 0" />
                    </Grid>
                  </StackPanel>
                </toolkit:DockPanel>
                <controls:DelayedAutoTriggerButton x:Name="CO_PlayEndedRecommend" IsEnabled="False" Visibility="Collapsed" Command="{Binding VideoEndedRecommendation.PlayNextVideoCommand}" HorizontalAlignment="Center" VerticalAlignment="Center">
                  <controls:DelayedAutoTriggerButton.CenterContent>
                    <StackPanel>
                      <TextBlock Text="次の動画" Style="{StaticResource CaptionTextBlockStyle}" Opacity="0.7" />
                      <TextBlock Text="{Binding VideoEndedRecommendation.NextVideoTitle}" />
                    </StackPanel>
                  </controls:DelayedAutoTriggerButton.CenterContent>
                  <i:Interaction.Behaviors>
                    <core:DataTriggerBehavior Binding="{Binding VideoEndedRecommendation.HasNextVideo}" Value="True" ComparisonCondition="Equal">
                      <core:CallMethodAction MethodName="Start" />
                    </core:DataTriggerBehavior>
                  </i:Interaction.Behaviors>
                </controls:DelayedAutoTriggerButton>
                <Border x:Name="CO_OpenPreviousPlaylistItemButton" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="0 0 0 8">
                  <Button MinWidth="48" Height="80" Command="{Binding VideoPlayer.PlayPreviousCommand}" BorderBrush="{StaticResource HohoemaPlayerBackgroundBrush}" BorderThickness="0 1 1 1">
                    <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE016;" FontSize="20" Foreground="{ThemeResource HohoemaPlayerBackgroundBrush}"></TextBlock>
                  </Button>
                </Border>
                <Border x:Name="CO_OpenNextPlaylistItemButton" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0 0 0 8">
                  <Button MinWidth="48" Height="80" Command="{Binding VideoPlayer.PlayNextCommand}" BorderBrush="{StaticResource HohoemaPlayerBackgroundBrush}" BorderThickness="1 1 0 1">
                    <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE017;" FontSize="20" Foreground="{ThemeResource HohoemaPlayerBackgroundBrush}"></TextBlock>
                  </Button>
                </Border>
              </Grid>
            </Grid>
            <Grid Visibility="{x:Bind IsDisplayControlUI, Mode=OneWay, Converter={StaticResource BooleanToVisibilityInverted}}">
              <Border IsHitTestVisible="True" Background="Transparent">
                <i:Interaction.Behaviors>
                  <core:EventTriggerBehavior EventName="Tapped">
                    <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="{x:Bind IsDisplayControlUI, Mode=OneWay, Converter={StaticResource BoolNegation}}" />
                  </core:EventTriggerBehavior>
                </i:Interaction.Behaviors>
              </Border>
            </Grid>
            <Grid>
              <!-- サポートされていないプロトコル・動画形式 -->
              <Border HorizontalAlignment="Left" VerticalAlignment="Top" Margin="32 64" Visibility="{Binding IsNotSupportVideoType, Converter={StaticResource BooleanToVisibility}}" Background="{StaticResource AppBarItemPointerOverBackgroundThemeBrush}" Padding="16">
                <StackPanel Orientation="Horizontal">
                  <iconPack:PackIconMaterial Kind="Exclamation" Margin="8 8 16 8" Width="32" Height="32" />
                  <StackPanel>
                    <TextBlock Text="動画を再生できません" VerticalAlignment="Center" Style="{StaticResource SubtitleTextBlockStyle}" Margin="0 0 0 8" />
                    <TextBlock VerticalAlignment="Center" TextWrapping="Wrap" Width="300">
                                            <Run Text="{Binding CannotPlayReason}" /></TextBlock>
                    <HyperlinkButton Content="ブラウザで表示" Command="{Binding ExternalAccessService.OpenLinkCommand}" CommandParameter="{Binding VideoInfo}"></HyperlinkButton>
                  </StackPanel>
                </StackPanel>
              </Border>
            </Grid>
          </Grid>
        </SplitView.Content>
      </SplitView>
    </toolkit:LayoutTransformControl>
    <VisualStateManager.VisualStateGroups>
      <!-- ログインしている場合に有効になるサービスを表示する -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding NiconicoSession.IsLoggedIn}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentLayout.Visibility" Value="Visible" />
            <Setter Target="CO_CommentBoxLayout.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- インターネット接続状態による表示切替 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <connectivityTrigger:NetworkConnectionStateTrigger Condition="InternetAccess" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ShowVideoInfoButon.Visibility" Value="Visible" />
            <Setter Target="ShareButton.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- 画面サイズごとの表示・非表示に切り替え -->
      <VisualStateGroup>
        <!-- 一番幅が広いとき -->
        <!--
                <VisualState>
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="721" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                    </VisualState.Setters>
                </VisualState>
                -->
        <!-- 中ぐらい -->
        <VisualState>
          <VisualState.StateTriggers>
            <uiTrigger:ControlWidthTrigger TargetElement="{x:Bind MediaControl}" Condition="521" ConditionModifier="{StaticResource GreaterThanModifier}" />
          </VisualState.StateTriggers>
          <VisualState.Setters></VisualState.Setters>
        </VisualState>
        <!-- 超狭い -->
        <VisualState>
          <VisualState.StateTriggers>
            <AdaptiveTrigger MinWindowWidth="0" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PreviewVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="ForwardVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="CommentTextBox.(Grid.Row)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentTextBox.(Grid.Column)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.ColumnSpan)" Value="6" />
            <Setter Target="CommentCommandEditButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.Column)" Value="0" />
            <Setter Target="CommentCommandEditButton.(Grid.ColumnSpan)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.Column)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.ColumnSpan)" Value="3" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- ミニモード　画面サイズごとの表示・非表示に切り替え -->
      <VisualStateGroup>
        <!-- 中ぐらい -->
        <VisualState>
          <VisualState.StateTriggers>
            <AdaptiveTrigger MinWindowWidth="280" />
          </VisualState.StateTriggers>
          <VisualState.Setters></VisualState.Setters>
        </VisualState>
        <!-- 超狭い -->
        <VisualState>
          <VisualState.StateTriggers>
            <AdaptiveTrigger MinWindowWidth="0" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CO_PreviewVideoPositionButton.Visibility" Value="Collapsed" />
            <Setter Target="CO_ForwardVideoPositionButton.Visibility" Value="Collapsed" />
            <Setter Target="CO_ToggleCommentDisplayButton.Visibility" Value="Collapsed" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- ミニモードの縦幅 -->
      <VisualStateGroup>
        <!-- 中ぐらい -->
        <VisualState>
          <VisualState.StateTriggers>
            <AdaptiveTrigger MinWindowHeight="200" />
          </VisualState.StateTriggers>
          <VisualState.Setters></VisualState.Setters>
        </VisualState>
        <!-- 超狭い -->
        <VisualState>
          <VisualState.StateTriggers>
            <AdaptiveTrigger MinWindowHeight="0" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CO_CommentTextBox.Visibility" Value="Collapsed" />
            <Setter Target="CO_OpenPreviousPlaylistItemButton.Visibility" Value="Collapsed" />
            <Setter Target="CO_OpenNextPlaylistItemButton.Visibility" Value="Collapsed" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コンパクトオーバーレイ切り替えボタンの表示・非表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:IsSupportCompactOverlayTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CompactOverlayButton.Visibility" Value="Visible" />
            <Setter Target="CompactOverlayButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コンパクトオーバーレイ表示中のコントロールUI切り替え -->
      <VisualStateGroup></VisualStateGroup>
      <!-- Xbox時のレイアウト調整 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Xbox" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSidePaneLayout.Margin" Value="0 27 0 27" />
            <Setter Target="UIControlContentLayout.Padding" Value="48 0 48 27" />
            <Setter Target="UIControlHeaderLayout.Margin" Value="48 27 48 0" />
            <Setter Target="UIControlCenterLayout.Margin" Value="48 0" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- フルスクリーン -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding WindowService.IsFullScreen.Value, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="AutoHideCursor.IsAutoHideEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- デバイスごとの閉じる・最大化・小窓ボタンの表示切り替え -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Mobile" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Xbox" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:IsShowWithSecondaryViewTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="DisplayWithMainViewButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton.Visibility" Value="Collapsed" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Collapsed" />
            <Setter Target="CloseButton.Visibility" Value="Collapsed" />
            <Setter Target="CO_CloseButton.Visibility" Value="Collapsed" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Desktop" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton_Menu.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- SplitViewのペインを開いた時のサイズ（最小サイズがOpePaneLaneghになるためレイアウトが崩れる場合がある）-->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:CompactOverlayViewModeTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSplitView.OpenPaneLength" Value="0" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowInWindowViewModeTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSplitView.OpenPaneLength" Value="0" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Mobile" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSplitView.OpenPaneLength" Value="300" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Xbox" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSplitView.OpenPaneLength" Value="450" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Desktop" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSplitView.OpenPaneLength" Value="450" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- 再生・停止 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.NowPlaying.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayPauseButtonIcon.Kind" Value="Pause" />
            <Setter Target="CO_PlayPauseButtonIcon.Kind" Value="Pause" />
            <Setter Target="TitleLayout.Opacity" Value="0.7" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- ミュートの有効・無効 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.IsMuted.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="VolumeButton.Symbol" Value="Mute" />
            <Setter Target="MuteToggleButton.Icon" Value="Mute" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.IsMuted.Value, Converter={StaticResource BoolNegation}}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="VolumeButton.Symbol" Value="Volume" />
            <Setter Target="MuteToggleButton.Icon" Value="Volume" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- ウィンドウ非アクティブ時にマウス移動に反応するエリアを拡大する -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowActiveTrigger Inverted="True" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="WindowDeactiveMouseMoveDetectWall.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowActiveTrigger Inverted="False" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="WindowDeactiveMouseMoveDetectWall.Visibility" Value="Collapsed" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- 別ウィンドウで開く -->
      <VisualStateGroup></VisualStateGroup>
      <!-- 小窓・コンパクトオーバーレイ -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:CompactOverlayViewModeTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CompactOverlayUIControl.Visibility" Value="Visible" />
            <Setter Target="DefaultUIControl.Visibility" Value="Collapsed" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowInWindowViewModeTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="DefaultUIControl.Visibility" Value="Collapsed" />
            <!--  UIControlLayout の表示をコントロールするとFadeアニメーションを含んだ操作によって表示が再開されてしまうので
                             アニメーションの影響を受けない内部のレイアウトを非表示にする
                        　　　DefaultUIControlはCompactOverlay時に非表示になるが小窓とは排他的な状態のため動作に競合は起きないはず
                        <Setter Target="UIControlLayout.Visibility" Value="Collapsed" />
                        -->
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.NowPlaying.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters></VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="True" />
          </VisualState.StateTriggers>
        </VisualState>
      </VisualStateGroup>
      <!-- シークバー表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:CompactOverlayViewModeTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ReadOnlySeekBarSlider.Visibility" Value="Collapsed" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind IsDisplayControlUI, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <!-- 読み取り再生位置スライダーの表示状態 -->
            <Setter Target="ReadOnlySeekBarSlider.Visibility" Value="Collapsed" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コントロールUIの自動非表示をOFFにするタイミングの制御 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind NowVideoPositionChanging, Mode=OneWay}" />
            <myTrigger:CompactOverlayViewModeTrigger />
            <StateTrigger IsActive="{Binding PlayerSettings.IsAutoHidePlayerControlUI, Converter={StaticResource BoolNegation}}" />
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.NowPlaying.Value, Converter={StaticResource BoolNegation}}" />
            <myTrigger:FocusTrigger Target="{x:Bind CommentTextBox}" />
            <myTrigger:FocusTrigger Target="{x:Bind CO_CommentTextBox}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerControlAutoHide.IsAutoHideEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- キーボード入力によるコメント書き込みショートカットの有効・無効 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:CompactOverlayViewModeTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentWriteBeginKeyboardTrigger.IsEnabled" Value="False" />
            <Setter Target="CO_CommentWriteBeginKeyboardTrigger.IsEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:FocusTrigger Target="{x:Bind CommentTextBox}" />
            <myTrigger:FocusTrigger Target="{x:Bind CO_CommentTextBox}" />
            <StateTrigger IsActive="{Binding ElementName=PlayerSplitView, Path=IsPaneOpen}" />
            <myTrigger:WindowInWindowViewModeTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentWriteBeginKeyboardTrigger.IsEnabled" Value="False" />
            <Setter Target="PlayPauseToggleKeyboardTrigger.IsEnabled" Value="False" />
            <Setter Target="VideoForwardKeyboardTrigger.IsEnabled" Value="False" />
            <Setter Target="VideoPreviewKeyboardTrigger.IsEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:FocusTrigger Target="{x:Bind CommentTextBox}" />
            <myTrigger:FocusTrigger Target="{x:Bind CO_CommentTextBox}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentWriteExitKeyboardTrigger.IsEnabled" Value="True" />
            <Setter Target="CommentSubmitKeyboardTrigger.IsEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コメント投稿欄の表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowInWindowViewModeTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters></VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コメント書き込み中 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding CommentPlayer.NowSubmittingComment.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentSubmittingProgressRing.IsActive" Value="True" />
            <Setter Target="CO_CommentSubmittingProgressRing.IsActive" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- Landscape固定ボタンの表示管理 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <uiTrigger:OrientationTrigger Condition="Landscape" />
          </VisualState.StateTriggers>
          <VisualState.Setters></VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <intractionTrigger:InteractionModeTrigger Condition="Touch" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ForceRotateToggleButton.Visibility" Value="Visible" />
            <Setter Target="ForceRotateToggleButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- モバイルの縦持ち時のLandscape固定処理 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowInWindowViewModeTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="LayoutRotateTranform.Angle" Value="0" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding PlayerSettings.IsForceLandscape, Converter={StaticResource BoolNegation}}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="LayoutRotateTranform.Angle" Value="0" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <logicalTrigger:MultiTrigger ConditionModifier="{StaticResource AndModifier}">
              <logicalTrigger:MultiTrigger.Triggers>
                <uiTrigger:OrientationTrigger Condition="Portrait" />
                <intractionTrigger:InteractionModeTrigger Condition="Touch" />
              </logicalTrigger:MultiTrigger.Triggers>
            </logicalTrigger:MultiTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="LayoutRotateTranform.Angle" Value="90" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <logicalTrigger:MultiTrigger>
              <logicalTrigger:MultiTrigger.Triggers>
                <hardTrigger:DeviceFamilyTrigger Condition="Desktop" />
              </logicalTrigger:MultiTrigger.Triggers>
            </logicalTrigger:MultiTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="TitleBarMarginLayout.Visibility" Value="Visible" />
            <Setter Target="PlayerSidePaneLayout.Padding" Value="0 32 0 0" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- ニコスクリプト: シーク禁止 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding CommentPlayer.NowSeekDisabledFromNicoScript}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SeekBarSlider.IsEnabled" Value="False" />
            <Setter Target="SeekDisabledFromNicoScriptText.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- ニコスクリプト: コメント禁止 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding CommentPlayer.NowCommentSubmitDisabledFromNicoScript}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentTextBox.IsEnabled" Value="False" />
            <Setter Target="CommentTextBox.PlaceholderText" Value="（コメント禁止）" />
            <Setter Target="CO_CommentTextBox.IsEnabled" Value="False" />
            <Setter Target="CO_CommentTextBox.PlaceholderText" Value="（コメント禁止）" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- 次の動画のオススメ表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding VideoEndedRecommendation.HasRecomend.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayEndedRecommendContainer.Visibility" Value="Visible" />
            <Setter Target="CO_PlayEndedRecommend.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:CompactOverlayViewModeTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayEndedRecommend.IsEnabled" Value="False" />
            <Setter Target="CO_PlayEndedRecommend.IsEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- 小窓状態の時、コントローラーのショートカット操作を無効に -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowInWindowViewModeTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ControllerToggleDisplayUITrigger.IsEnabled" Value="False" />
            <Setter Target="ConrollerHidePlayerTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerSeekPreviewTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerSeekForwardTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerTogglePlayPauseTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerToggleDisplayUITrigger.IsEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>
  </Grid>
</Page>
